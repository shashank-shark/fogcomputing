{"version":3,"sources":["serviceWorker.js","react-auth0-spa.js","components/Profile.js","components/Screens/Home/HomeScreen.js","components/Cards/CardInteractive.js","components/Screens/Services/ServicesScreen.js","components/Screens/Analytics/AnalyticsScreen.js","components/PrivateRoute.js","components/Menu/UserProfileMenu.js","components/Menu/UserSettingsMenu.js","components/Menu/NotificationAndMessagesMenu.js","components/Navbar/AppNavigationBar.js","components/Screens/Settings/NetworkSettings.js","App.js","auth.config.js","index.js"],"names":["Boolean","window","location","hostname","match","DEFAULT_REDIRECT_CALLBACK","history","replaceState","document","title","pathname","Auth0Context","React","createContext","useAuth0","useContext","Profile","loading","user","src","picture","name","email","JSON","stringify","HomeScreen","styles","cardStyle","width","CardInterative","props","style","elevation","interactive","heading","description","cardContainerStyle","display","gridTemplateColumns","gridGap","marginTop","ServicesScreen","AnalyticsScreen","PrivateRoute","Component","component","path","rest","isAuthenticated","loginWithRedirect","useEffect","a","appState","targetUrl","fn","render","UserMenuItems","logout","to","textDecoration","color","text","icon","onClick","iconStyles","margin","innstyle","UserProfileMenu","content","position","Position","BOTTOM_LEFT","Colors","BLACK","UserSettingsMenuItems","UserSettingsMenu","NotificationAndMessagesMenuItems","NotificationAndMessagesMenu","navbarHeading","backgroundColor","paddingTop","navBarButton","AppNavigationBar","align","Alignment","LEFT","RIGHT","intent","Intent","PRIMARY","SUCCESS","NetworkSettings","App","className","excat","authConfig","ReactDOM","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setpopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","client_id","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f8426590.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () => window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\n\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}) => {\n    const [isAuthenticated, setIsAuthenticated] = useState();\n    const [user, setUser] = useState();\n    const [auth0Client, setAuth0] = useState();\n    const [loading, setLoading] = useState(true);\n    const [popupOpen, setpopupOpen] = useState(false);\n\n\n    useEffect( () => {\n\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0 (auth0FromHook);\n\n            if (window.location.search.includes('code=')) {\n                const { appState } = await auth0FromHook.handleRedirectCallback();\n                onRedirectCallback(appState);\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated();\n            setIsAuthenticated(isAuthenticated);\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser();\n                setUser(user);\n            }\n\n            setLoading(false);\n        };\n\n        initAuth0();\n    }, []);\n\n\n    const loginWithPopup = async (params = {}) => {\n\n        setpopupOpen(true);\n\n        try {\n            await auth0Client.loginWithPopup(params);\n        } catch (error) {\n            console.error(error)\n        } finally {\n            setpopupOpen(false);\n        }\n\n        const user = await auth0Client.getUser();\n        setUser(user);\n        setIsAuthenticated(true);\n    };\n\n    const handleRedirectCallback = async () => {\n        setLoading(true);\n\n        await auth0Client.handleRedirectCallback();\n        const user = await auth0Client.getUser();\n        setUser(user);\n        setIsAuthenticated(true);\n        setLoading(false);\n    };\n\n    return (\n        <Auth0Context.Provider\n            value={{isAuthenticated, user, loading, popupOpen, loginWithPopup, handleRedirectCallback,\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n                logout: (...p) => auth0Client.logout(...p)\n            }}>\n            {children}\n        </Auth0Context.Provider>\n    );\n};","import React from \"react\";\n\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n\n    const { loading, user} = useAuth0();\n\n    if (loading || !user) {\n        return (\n            <div>Loading ...</div>\n        );\n    }\n\n    return (\n      <div>\n\n          <img src={user.picture} />\n          <h2>{user.name}</h2>\n          <h2>{user.email}</h2>\n\n          <code>{JSON.stringify(user, null, 2)}</code>\n      </div>\n    );\n\n};\n\nexport default Profile;","import React from \"react\";\n\nconst HomeScreen = () => {\n\n    return (\n        <div>\n            HomeScreen.js\n        </div>\n    );\n};\n\nexport default HomeScreen;","import React from \"react\";\nimport {\n    Card,\n    H5,\n    Button\n} from \"@blueprintjs/core\";\n\nconst CardInterative = (props) => {\n\n    return (\n      <div style={styles.cardStyle}>\n\n          <Card elevation=\"3\" interactive={true}>\n\n              <H5>\n                  {props.heading}\n              </H5>\n\n              <p>\n                  {props.description}\n              </p>\n\n          </Card>\n\n      </div>\n    );\n};\n\nconst styles = {\n    cardStyle : {\n        width: '100%'\n    }\n};\n\nexport default CardInterative;","import React from \"react\";\n\nimport CardInterative from \"../../Cards/CardInteractive\";\n\n\nconst ServicesScreen = () => {\n\n    return (\n        <div style={styles.cardContainerStyle}>\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n            <CardInterative heading=\"Messaging\" description=\"There can be only one winner, Let's Go\" />\n        </div>\n    );\n};\n\nconst styles = {\n    cardContainerStyle : {\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridGap: '2%',\n        marginTop: '1%'\n    }\n}\n\nexport default ServicesScreen;","import React from \"react\";\n\nconst AnalyticsScreen = () => {\n\n    return (\n        <div>\n            AnalyticsScreen.js\n        </div>\n    );\n};\n\nexport default AnalyticsScreen;","import React, {useEffect} from \"react\";\nimport { Route } from 'react-router-dom';\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest}) => {\n\n    const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n    useEffect( () => {\n\n        if (loading || isAuthenticated) {\n            return;\n        }\n\n        const fn = async() => {\n\n            await loginWithRedirect ({\n                appState: { targetUrl : path}\n            });\n        };\n\n        fn();\n    }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n    const render = props => isAuthenticated === true ?\n        <Component {...props} /> :\n        null;\n\n    return <Route path={path} render={render} {...rest} />;\n\n};\n\nexport default PrivateRoute;","import React from \"react\";\n\nimport {\n    Position,\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Popover,\n    Icon, Button, Colors, Intent\n} from '@blueprintjs/core';\n\nimport { useAuth0 } from \"../../react-auth0-spa\";\nimport {Link} from \"react-router-dom\";\n\nconst UserMenuItems = () => {\n\n    const { logout } = useAuth0();\n\n    return (\n        <Menu>\n            <Menu>\n                <Link to=\"/profile\" style={{ textDecoration: 'none', color: 'black'}}>\n                    <MenuItem text=\"My Profile\" icon=\"user\" />\n                </Link>\n                <MenuItem text=\"Storage\" icon=\"database\" />\n                <MenuItem text=\"Subscribers\" icon=\"people\" />\n                <MenuDivider />\n                <MenuItem text=\"Projects\" icon=\"th\" />\n                <MenuItem text=\"Organization\" icon=\"flow-review-branch\" />\n                <MenuDivider />\n                <MenuItem text=\"Signout\" icon=\"log-out\" onClick={() => logout()} />\n            </Menu>\n        </Menu>\n    );\n};\n\nconst UserProfileMenu = (props) => {\n\n    return (\n        <Popover content={<UserMenuItems />} position={Position.BOTTOM_LEFT}>\n            <Button style={styles.iconStyles}>\n                <Icon style={styles.innstyle} icon=\"user\" color={Colors.BLACK} />\n            </Button>\n        </Popover>\n    );\n\n};\n\nconst styles = {\n\n    iconStyles : {\n        margin: '2px'\n    },\n    innstyle: {\n        margin: '2px'\n    }\n}\n\nexport default UserProfileMenu;","import React from \"react\";\n\nimport {\n    Position,\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Popover,\n    Icon, Button, Colors, Intent\n} from '@blueprintjs/core';\nimport {Link} from \"react-router-dom\";\n\nconst UserSettingsMenuItems = () => {\n\n    return (\n        <Menu>\n            <Menu>\n\n                <Link to=\"/networksettings\" style={{ textDecoration: 'none', color: 'black'}}>\n                    <MenuItem text=\"Network Settings\" icon=\"globe-network\" />\n                </Link>\n\n                <MenuItem text=\"Update Settings\" icon=\"automatic-updates\" />\n                <MenuDivider />\n                <MenuItem text=\"Export Settings\" icon=\"send-to\" />\n            </Menu>\n        </Menu>\n    );\n};\n\nconst UserSettingsMenu = (props) => {\n\n    return (\n        <Popover content={<UserSettingsMenuItems />} position={Position.BOTTOM_LEFT}>\n            <Button style={styles.iconStyles}>\n                <Icon style={styles.innstyle} icon=\"cog\" color={Colors.BLACK} />\n            </Button>\n        </Popover>\n    );\n\n};\n\nconst styles = {\n\n    iconStyles : {\n        margin: '2px'\n    },\n    innstyle: {\n        margin: '2px'\n    }\n}\n\nexport default UserSettingsMenu;","import React from \"react\";\n\nimport {\n    Position,\n    Menu,\n    MenuItem,\n    MenuDivider,\n    Popover,\n    Icon, Button, Colors, Intent\n} from '@blueprintjs/core';\n\nconst NotificationAndMessagesMenuItems = () => {\n\n    return (\n        <Menu>\n            <MenuItem text=\"Inbox\" icon=\"envelope\" />\n            <MenuItem text=\"Chats\" icon=\"chat\" />\n            <MenuItem text=\"Subscriber Feeds\" icon=\"feed\" />\n        </Menu>\n    );\n};\n\nconst NotificationAndMessagesMenu = (props) => {\n\n    return (\n        <Popover content={<NotificationAndMessagesMenuItems />} position={Position.BOTTOM_LEFT}>\n            <Button style={styles.iconStyles}>\n                <Icon style={styles.innstyle} icon=\"notifications\" color={Colors.BLACK} />\n            </Button>\n        </Popover>\n    );\n\n};\n\nconst styles = {\n\n    iconStyles : {\n        margin: '2px'\n    },\n    innstyle: {\n        margin: '2px'\n    }\n}\n\nexport default NotificationAndMessagesMenu;","import React from \"react\";\n\nimport {\n    Alignment,\n    Button,\n    Classes,\n    H2, Intent,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    Switch,\n\n} from '@blueprintjs/core';\n\nimport { useAuth0 } from \"../../react-auth0-spa\";\n\nimport UserProfileMenu from \"../Menu/UserProfileMenu\";\nimport UserSettingsMenu from \"../Menu/UserSettingsMenu\";\nimport NotificationAndMessagesMenu from \"../Menu/NotificationAndMessagesMenu\";\nimport Profile from \"../Profile\";\nimport {Link} from \"react-router-dom\";\n\nconst AppNavigationBar = () => {\n\n    // we get the states for auth\n    const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n    return (\n      <div>\n          <Navbar>\n\n              <NavbarGroup align={Alignment.LEFT}>\n                  <NavbarHeading style={styles.navbarHeading}><H2>Real Time Fog Computing</H2></NavbarHeading>\n                  <NavbarDivider />\n              </NavbarGroup>\n\n              <NavbarGroup align={Alignment.RIGHT}>\n\n                  {\n                      isAuthenticated &&\n                      <>\n                          <Link to=\"/home\">\n                              <Button style={styles.navBarButton} icon=\"home\" intent={Intent.PRIMARY}>\n                                  <b>Home</b>\n                              </Button>\n                          </Link>\n\n                          <Link to=\"/services\">\n                             <Button style={styles.navBarButton} icon=\"cloud\" intent={Intent.PRIMARY}>\n                                 <b>Services</b>\n                             </Button>\n                          </Link>\n\n                          <Link to=\"/analytics\">\n                              <Button style={styles.navBarButton} icon=\"predictive-analysis\" intent={Intent.PRIMARY}>\n                                  <b>Alalytics</b>\n                              </Button>\n                          </Link>\n\n                          <NavbarDivider />\n\n                          <UserSettingsMenu />\n                          <NotificationAndMessagesMenu />\n                          <UserProfileMenu />\n                      </>\n                  }\n              </NavbarGroup>\n\n              <NavbarGroup align={Alignment.RIGHT}>\n                  <NavbarDivider />\n                  {\n                      !isAuthenticated &&\n                      <Button icon=\"log-in\" intent={Intent.SUCCESS} onClick={() => loginWithRedirect({})}>\n                          Signin\n                      </Button>\n                  }\n              </NavbarGroup>\n          </Navbar>\n      </div>\n    );\n}\n\nconst styles = {\n\n    navbarHeading : {\n        backgroundColor: 'white',\n        color: 'black',\n        paddingTop: '6px'\n    },\n\n    navBarButton: {\n        margin: '2px'\n    }\n}\n\nexport default AppNavigationBar;","import React from \"react\";\n\nconst NetworkSettings = () => {\n\n    return (\n      <div>\n          NetworkSettings.js\n      </div>\n    );\n};\n\nexport default NetworkSettings;","import React from 'react';\n\nimport Navbar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Profile from \"./components/Profile\";\n\n// import the screens\nimport HomeScreen from \"./components/Screens/Home/HomeScreen\";\nimport ServicesScreen from \"./components/Screens/Services/ServicesScreen\";\nimport AnalyticsScreen from \"./components/Screens/Analytics/AnalyticsScreen\";\n\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nimport AppNavigationBar from \"./components/Navbar/AppNavigationBar\";\nimport NetworkSettings from \"./components/Screens/Settings/NetworkSettings\";\n\nfunction App() {\n\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n      <div className=\"App\">\n          <BrowserRouter>\n\n              <header>\n                  <AppNavigationBar />\n              </header>\n\n              <Switch>\n\n                  <Route path=\"/home\" excat component={HomeScreen} />\n                  <Route path=\"/services\" excat component={ServicesScreen} />\n                  <Route path=\"/analytics\" excat component={AnalyticsScreen} />\n                  <Route path=\"/networksettings\" excat component={NetworkSettings} />\n\n                  <PrivateRoute path=\"/profile\" component={Profile} />\n\n              </Switch>\n\n          </BrowserRouter>\n      </div>\n\n  );\n}\n\nexport default App;\n","export const authConfig = {\n    domain: 'dev-u0mcqthi.auth0.com',\n    clientId: '9jW1WnoazzHYg5VY4fLe4vx2P7V1xjM9',\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\n\nimport App from './App';\nimport { Auth0Provider} from \"./react-auth0-spa\";\nimport { authConfig} from \"./auth.config\";\n\nconst onRedirectCallback = appState => {\n    window.history.replaceState(\n        {},\n        document.title,\n        appState  && appState.targetUrl\n        ? appState.targetUrl : window.location.pathname\n    )\n}\n\nReactDOM.render(\n    <Auth0Provider\n        domain={authConfig.domain} client_id={authConfig.clientId} redirect_uri={window.location.origin}\n        onRedirectCallback={onRedirectCallback}\n    >\n\n        <App />\n    </Auth0Provider>\n\n   , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}